TAPTAB RESTAURANT MANAGEMENT SYSTEM - BACKEND API REQUIREMENTS
================================================================

AUTHENTICATION & AUTHORIZATION
==============================
All endpoints require JWT token validation in Authorization header:
Authorization: Bearer <jwt_token>

User roles: SUPER_ADMIN, TENANT_ADMIN, MANAGER, CASHIER, WAITER, KITCHEN, READONLY

FEATURE 1: MENU MANAGEMENT
===========================

1. GET /api/menu/items
   - Get all menu items for the restaurant
   - Query params: ?category=id (optional filter by category)
   - Response: {
     "items": [
       {
         "id": "uuid",
         "name": "Burger",
         "description": "Beef burger with fries",
         "price": 12.99,
         "category": "Main Course",
         "categoryId": "uuid",
         "image": "url_or_null",
         "isActive": true,
         "createdAt": "timestamp",
         "updatedAt": "timestamp"
       }
     ]
   }

2. POST /api/menu/items
   - Create new menu item
   - Required roles: TENANT_ADMIN, MANAGER
   - Body: {
     "name": "string",
     "description": "string",
     "price": "number",
     "categoryId": "uuid",
     "image": "url_or_null" (optional)
   }
   - Response: { "item": {...} }

3. PUT /api/menu/items/:id
   - Update menu item
   - Required roles: TENANT_ADMIN, MANAGER
   - Body: {
     "name": "string",
     "description": "string", 
     "price": "number",
     "categoryId": "uuid",
     "image": "url_or_null",
     "isActive": "boolean"
   }
   - Response: { "item": {...} }

4. DELETE /api/menu/items/:id
   - Delete menu item
   - Required roles: TENANT_ADMIN, MANAGER
   - Response: { "success": true }

5. GET /api/menu/categories
   - Get all menu categories
   - Response: {
     "categories": [
       {
         "id": "uuid",
         "name": "Appetizers",
         "description": "Starters and small plates",
         "createdAt": "timestamp"
       }
     ]
   }

6. POST /api/menu/categories
   - Create new category
   - Required roles: TENANT_ADMIN, MANAGER
   - Body: {
     "name": "string",
     "description": "string"
   }
   - Response: { "category": {...} }

FEATURE 2: TABLES MANAGEMENT
============================

1. GET /api/tables
   - Get all tables for the restaurant
   - Response: {
     "tables": [
       {
         "id": "uuid",
         "number": "string",
         "capacity": "number",
         "status": "available|occupied|reserved|cleaning",
         "location": "string",
         "currentOrderId": "uuid_or_null",
         "createdAt": "timestamp"
       }
     ]
   }

2. POST /api/tables
   - Create new table
   - Required roles: TENANT_ADMIN, MANAGER
   - Body: {
     "number": "string",
     "capacity": "number",
     "location": "string"
   }
   - Response: { "table": {...} }

3. PUT /api/tables/:id
   - Update table
   - Required roles: TENANT_ADMIN, MANAGER
   - Body: {
     "number": "string",
     "capacity": "number",
     "status": "string",
     "location": "string"
   }
   - Response: { "table": {...} }

4. DELETE /api/tables/:id
   - Delete table
   - Required roles: TENANT_ADMIN, MANAGER
   - Response: { "success": true }

5. PUT /api/tables/:id/status
   - Update table status only
   - Required roles: WAITER, MANAGER, TENANT_ADMIN
   - Body: { "status": "available|occupied|reserved|cleaning" }
   - Response: { "table": {...} }

FEATURE 3: ORDERS MANAGEMENT
=============================

1. GET /api/orders
   - Get all orders for the restaurant
   - Query params: ?status=pending&tableId=uuid (optional filters)
   - Response: {
     "orders": [
       {
         "id": "uuid",
         "tableId": "uuid",
         "tableNumber": "string",
         "items": [
           {
             "id": "uuid",
             "menuItemId": "uuid",
             "menuItemName": "string",
             "quantity": "number",
             "price": "number",
             "notes": "string",
             "status": "pending|preparing|ready|served"
           }
         ],
         "total": "number",
         "status": "pending|preparing|ready|served|cancelled",
         "waiterId": "uuid",
         "waiterName": "string",
         "createdAt": "timestamp",
         "updatedAt": "timestamp"
       }
     ]
   }

2. POST /api/orders
   - Create new order
   - Required roles: WAITER, CASHIER, MANAGER, TENANT_ADMIN
   - Body: {
     "tableId": "uuid",
     "items": [
       {
         "menuItemId": "uuid",
         "quantity": "number",
         "notes": "string" (optional)
       }
     ]
   }
   - Response: { "order": {...} }

3. PUT /api/orders/:id
   - Update order status
   - Required roles: WAITER, CASHIER, MANAGER, TENANT_ADMIN
   - Body: { "status": "pending|preparing|ready|served|cancelled" }
   - Response: { "order": {...} }

4. PUT /api/orders/:id/items/:itemId
   - Update specific item status
   - Required roles: KITCHEN, MANAGER, TENANT_ADMIN
   - Body: { "status": "pending|preparing|ready|served" }
   - Response: { "item": {...} }

5. DELETE /api/orders/:id
   - Cancel order
   - Required roles: WAITER, CASHIER, MANAGER, TENANT_ADMIN
   - Response: { "success": true }

FEATURE 4: ANALYTICS
====================

1. GET /api/analytics/sales
   - Get sales analytics
   - Query params: ?startDate=YYYY-MM-DD&endDate=YYYY-MM-DD
   - Required roles: TENANT_ADMIN, MANAGER
   - Response: {
     "totalSales": "number",
     "totalOrders": "number",
     "averageOrderValue": "number",
     "topItems": [
       {
         "menuItemId": "uuid",
         "name": "string",
         "quantity": "number",
         "revenue": "number"
       }
     ],
     "dailySales": [
       {
         "date": "YYYY-MM-DD",
         "sales": "number",
         "orders": "number"
       }
     ]
   }

2. GET /api/analytics/orders
   - Get order analytics
   - Query params: ?status=pending&tableId=uuid
   - Required roles: TENANT_ADMIN, MANAGER
   - Response: {
     "pendingOrders": "number",
     "preparingOrders": "number", 
     "readyOrders": "number",
     "completedOrders": "number"
   }

FEATURE 5: SETTINGS
===================

1. GET /api/settings
   - Get restaurant settings
   - Required roles: TENANT_ADMIN
   - Response: {
     "restaurantName": "string",
     "address": "string",
     "phone": "string",
     "email": "string",
     "taxRate": "number",
     "currency": "string",
     "timezone": "string"
   }

2. PUT /api/settings
   - Update restaurant settings
   - Required roles: TENANT_ADMIN
   - Body: {
     "restaurantName": "string",
     "address": "string", 
     "phone": "string",
     "email": "string",
     "taxRate": "number",
     "currency": "string",
     "timezone": "string"
   }
   - Response: { "settings": {...} }

ERROR RESPONSES
===============

All endpoints should return consistent error responses:

400 Bad Request:
{
  "error": "Validation error message",
  "details": ["field1", "field2"]
}

401 Unauthorized:
{
  "error": "Invalid or missing token"
}

403 Forbidden:
{
  "error": "Insufficient permissions"
}

404 Not Found:
{
  "error": "Resource not found"
}

500 Internal Server Error:
{
  "error": "Internal server error"
}

DATABASE SCHEMA REQUIREMENTS
===========================

Tables needed:
- menu_items (id, name, description, price, category_id, image, is_active, tenant_id, created_at, updated_at)
- menu_categories (id, name, description, tenant_id, created_at)
- tables (id, number, capacity, status, location, tenant_id, created_at, updated_at)
- orders (id, table_id, waiter_id, total, status, tenant_id, created_at, updated_at)
- order_items (id, order_id, menu_item_id, quantity, price, notes, status, created_at)
- settings (id, restaurant_name, address, phone, email, tax_rate, currency, timezone, tenant_id, created_at, updated_at)

All tables should include tenant_id for multi-tenant support. 