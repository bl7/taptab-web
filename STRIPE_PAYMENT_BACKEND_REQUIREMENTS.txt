STRIPE PAYMENT BACKEND REQUIREMENTS
=====================================

OVERVIEW
--------
Implement Stripe payment integration for multi-tenant SaaS platform.
All payments happen on the frontend without redirects.
Supports Apple Pay, Google Pay, and regular card payments.

ENVIRONMENT VARIABLES
--------------------
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
STRIPE_PUBLISHABLE_KEY=pk_test_... (for testing)

DATABASE TABLES
---------------

1. tenant_payment_configs
-------------------------
CREATE TABLE tenant_payment_configs (
  id SERIAL PRIMARY KEY,
  tenant_slug VARCHAR(255) UNIQUE NOT NULL,
  stripe_publishable_key VARCHAR(255),
  stripe_secret_key VARCHAR(255),
  currency VARCHAR(10) DEFAULT 'usd',
  merchant_name VARCHAR(255),
  merchant_country VARCHAR(10) DEFAULT 'US',
  apple_pay_enabled BOOLEAN DEFAULT false,
  google_pay_enabled BOOLEAN DEFAULT false,
  merchant_id VARCHAR(255), -- Apple Pay merchant ID
  merchant_capabilities TEXT[], -- ['supports3DS', 'supportsCredit', 'supportsDebit']
  is_stripe_enabled BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

2. order_payments
-----------------
CREATE TABLE order_payments (
  id SERIAL PRIMARY KEY,
  order_id VARCHAR(255) NOT NULL,
  tenant_slug VARCHAR(255) NOT NULL,
  payment_intent_id VARCHAR(255) UNIQUE,
  amount INTEGER NOT NULL, -- in cents
  currency VARCHAR(10) DEFAULT 'usd',
  payment_method VARCHAR(50), -- 'card', 'apple_pay', 'google_pay'
  stripe_payment_method_id VARCHAR(255),
  status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'confirmed', 'failed'
  metadata JSONB, -- store additional payment data
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

API ENDPOINTS
-------------

1. GET /api/v1/tenants/{tenantSlug}/stripe-config
   ------------------------------------------------
   Purpose: Get tenant's Stripe configuration for frontend
   
   Response:
   {
     "publishableKey": "pk_test_...",
     "currency": "usd",
     "merchantName": "Restaurant Name",
     "merchantCountry": "US",
     "isStripeEnabled": true,
     "applePayEnabled": true,
     "googlePayEnabled": true,
     "merchantId": "merchant.com.restaurant",
     "merchantCapabilities": ["supports3DS", "supportsCredit", "supportsDebit"]
   }

2. POST /api/v1/orders/create-payment-intent
   -------------------------------------------
   Purpose: Create Stripe payment intent for order
   
   Request Body:
   {
     "tenantSlug": "restaurant-slug",
     "amount": 2500, // in cents
     "currency": "usd",
     "orderId": "order-123",
     "customerEmail": "customer@email.com",
     "metadata": {
       "tenantSlug": "restaurant-slug",
       "tableNumber": "5",
       "orderType": "dine_in"
     }
   }
   
   Response:
   {
     "clientSecret": "pi_xxx_secret_xxx",
     "paymentIntentId": "pi_xxx",
     "amount": 2500,
     "currency": "usd"
   }

3. POST /api/v1/orders/{orderId}/confirm-payment
   ----------------------------------------------
   Purpose: Confirm payment after successful frontend processing
   
   Request Body:
   {
     "paymentIntentId": "pi_xxx",
     "paymentMethod": "card|apple_pay|google_pay",
     "amount": 2500,
     "stripePaymentMethodId": "pm_xxx"
   }
   
   Response:
   {
     "success": true,
     "orderId": "order-123",
     "paymentStatus": "confirmed",
     "amount": 2500
   }

4. GET /api/v1/orders/{orderId}/payment-status
   ---------------------------------------------
   Purpose: Check payment status for order
   
   Response:
   {
     "paymentStatus": "pending|confirmed|failed",
     "paymentIntentId": "pi_xxx",
     "amount": 2500,
     "lastUpdated": "2024-01-15T10:30:00Z"
   }

5. POST /api/v1/webhooks/stripe
   ------------------------------
   Purpose: Handle Stripe webhooks for payment status updates
   
   Headers:
   - Stripe-Signature: webhook signature
   
   Events to handle:
   - payment_intent.succeeded
   - payment_intent.payment_failed
   - payment_intent.canceled

BACKEND IMPLEMENTATION STEPS
---------------------------

1. Install Stripe SDK
   npm install stripe

2. Initialize Stripe
   const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

3. Create Payment Intent Logic
   - Validate tenant exists and has Stripe enabled
   - Create payment intent with tenant metadata
   - Store payment record in database
   - Return client secret

4. Confirm Payment Logic
   - Verify payment intent exists
   - Update order payment status
   - Handle success/failure scenarios

5. Webhook Handler
   - Verify webhook signature
   - Update payment status based on events
   - Handle payment failures

ERROR HANDLING
-------------
- 400: Invalid request data
- 401: Unauthorized (invalid tenant)
- 402: Payment failed
- 404: Tenant not found
- 500: Server error

SECURITY CONSIDERATIONS
----------------------
- Validate webhook signatures
- Sanitize all input data
- Use HTTPS only
- Implement rate limiting
- Log all payment activities
- Store sensitive data encrypted

TESTING
-------
- Use Stripe test keys
- Test with test card numbers
- Test Apple Pay in Safari
- Test Google Pay in Chrome
- Test webhook handling

DEPLOYMENT CHECKLIST
-------------------
□ Stripe account created
□ API keys configured
□ Webhook endpoint configured
□ Database tables created
□ Apple Pay merchant ID (if using)
□ Google Pay API enabled (if using)
□ HTTPS certificate installed
□ Test payments working
□ Production keys ready

FRONTEND INTEGRATION
-------------------
Frontend will:
1. Fetch tenant Stripe config
2. Initialize Stripe Elements
3. Create payment intent
4. Process payment on frontend
5. Confirm payment with backend
6. Handle success/failure

No redirects - everything happens on the website! 